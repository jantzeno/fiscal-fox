import { TestBed } from '@angular/core/testing';
import { provideMockActions } from '@ngrx/effects/testing';
import { Store } from '@ngrx/store';
import { BudgetResponse } from 'src/app/services/budget-response.model';
import { BudgetesService } from 'src/app/services/budgetes.service';
import { MOCK_STORE$ } from 'src/app/store/testing';
import {
  loadBudget,
  loadBudgetes,
  loadBudgetesFailure,
  loadBudgetesSuccess,
  loadBudgetFailure,
  loadBudgetsuccess,
} from '../actions';
import { MOCK_BUDGET } from '../budget-initial-mock-state';
import { BudgetesEffects } from './budgetes.effects';
import { cold, hot } from 'jasmine-marbles';
import { Observable, of } from 'rxjs';

const mockBudgetesService = {
  getBudgetes: () => of([MOCK_BUDGET]),
  getBudget: () => of(MOCK_BUDGET),
  // createBudget: () => {}
};

const mockBudgetesResponse: BudgetResponse[] = [MOCK_BUDGET];

describe('BudgetesEffects', () => {
  let actions$: Observable<any>;
  let budgetesService: BudgetesService;
  let effects: BudgetesEffects;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        BudgetesEffects,
        provideMockActions(() => actions$),
        { provide: Store, useValue: MOCK_STORE$ },
        { provide: BudgetesService, useValue: mockBudgetesService },
      ],
    });
    effects = TestBed.inject(BudgetesEffects);
    budgetesService = TestBed.inject(BudgetesService);
  });

  describe('loadBudgetes$', () => {
    it('should successfully load budgetes', () => {
      spyOn(budgetesService, 'getBudgetes').and.returnValue(
        of(mockBudgetesResponse)
      );
      actions$ = hot('a', {
        a: loadBudgetes(),
      });

      const expected$ = cold('b', {
        b: loadBudgetesSuccess({ budgetes: [MOCK_BUDGET] }),
      });

      expect(effects.loadBudgetes$).toBeObservable(expected$);
    });

    it('should fail to load budgetes', () => {
      const errMsg = 'I tried...';
      const error$ = cold('#', {}, errMsg);

      spyOn(budgetesService, 'getBudgetes').and.returnValue(error$);
      actions$ = hot('a', {
        a: loadBudgetes(),
      });

      const expected$ = cold('b', {
        b: loadBudgetesFailure({ error: errMsg }),
      });

      expect(effects.loadBudgetes$).toBeObservable(expected$);
    });
  });

  describe('loadBudget$', () => {
    it('should successfully load a budget', () => {
      spyOn(budgetesService, 'getBudget').and.returnValue(
        of(mockBudgetesResponse[0])
      );
      actions$ = hot('a', {
        a: loadBudget({ budgetId: 'budgetId' }),
      });

      const expected$ = cold('b', {
        b: loadBudgetsuccess({ budget: MOCK_BUDGET }),
      });
      expect(effects.loadBudget$).toBeObservable(expected$);
    });

    it('should fail to load a budget', () => {
      const errMsg = 'I tried...';
      const error$ = cold('#', {}, errMsg);

      spyOn(budgetesService, 'getBudget').and.returnValue(error$);
      actions$ = hot('a', {
        a: loadBudget({ budgetId: 'budgetId' }),
      });

      const expected$ = cold('b', {
        b: loadBudgetFailure({ error: errMsg }),
      });

      expect(effects.loadBudget$).toBeObservable(expected$);
    });
  });
});
